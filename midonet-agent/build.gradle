/*
 * Copyright 2016 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/fpm.gradle"
apply from: "${rootProject.projectDir}/git.gradle"

jar {
    manifest {
        attributes 'Implementation-Title': 'MidoNet Agent',
                   'Implementation-Version': version
    }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
}

dependencies {
    compile project(':midonet-util'), project(':nsdb')

    compile libraries.scala,
            libraries.commons_lang3,
            libraries.commons_lang,
            libraries.commons_cli,
            libraries.commons_codec,
            libraries.guava,
            libraries.metrics,
            libraries.rx,
            libraries.logback,
            libraries.logback_logstash,
            libraries.zookeeper,
            libraries.curator_recipes,
            libraries.scala_logging,
            libraries.scallop,
            libraries.protobuf,
            libraries.disruptor,
            libraries.curator_test,
            libraries.reflections,
            libraries.vpp_core,
            libraries.vpp_registry

    testCompile libraries.scalatest,
                libraries.curator_test,
                libraries.mockit,
                libraries.test_frameworks
}

cobertura {
    coverageExcludes = [
    ]
}

// These three below allow exposing some test classes to other modules

configurations {
    tests.extendsFrom (testCompile)
}

task jarTest (type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

artifacts {
    tests jarTest
}

task preparePkg(type: Copy, dependsOn: installShadowApp) {
    from("${buildDir}/installShadow/${project.name}/lib/${project.name}-${midonetVersion}-all.jar") {
        into "usr/share/midonet-agent"
    }
    from("${buildDir}/man/") {
        include "*.*"
        into "usr/share/man/man1"
    }
    from("CHANGE-LOG.txt") {
        into "usr/share/doc/midonet-agent/"
    }
    from("src/deb/init/midonet-agent.conf") {
        into "etc/init"
    }
    from("conf") {
        into "etc/midonet-agent"
    }
    from("src/deb/init/midonet-agent-prepare") {
        into "usr/share/midonet-agent"
    }
    from("src/deb/init/midonet-agent-start") {
        into "usr/share/midonet-agent"
    }
    from("src/deb/init/prepare-java") {
        into "usr/share/midonet-agent"
    }
    into "${pkgDestDir}"
    doLast {
        new File("${pkgDestDir}/usr/share/midonet-agent/${project.name}-${midonetVersion}-all.jar").
                renameTo("${pkgDestDir}/usr/share/midonet-agent/${project.name}.jar")
    }
}

task debianPrepare(type: Copy, dependsOn: installShadowApp) {
    from("src/systemd/midonet-agent.service") {
        into "lib/systemd/system"
    }
    into "${pkgDestDir}"
}

task rhel7Prepare(type: Copy, dependsOn: installShadowApp) {
    from("src/systemd/midonet-agent.service") {
        into "usr/lib/systemd/system"
    }
    into "${pkgDestDir}"
}

packaging {
    version = project.debVersion
    maintainer = project.maintainer
    vendor = project.vendor
    url = project.url
    description = 'MidoNet Agent is a virtual network controller'
    dependencies = ['midonet-tools', 'vpp']
    confFiles = ['/etc/midonet-agent/midonet-agent-env.sh',
                 '/etc/midonet-agent/midonet-agent.conf',
                 '/etc/midonet-agent/logback.xml' ]
    fpmOpts = ['-a', 'all',
               '--category', 'network',
               '--url', 'http://midonet.org',
               '--epoch', '2']
}

preparePkg.dependsOn cleanPkg

debian.dependsOn debianPrepare
debianPrepare.dependsOn preparePkg

rpm.dependsOn rhel7Prepare
rhel7Prepare.dependsOn preparePkg

tar.dependsOn preparePkg

debian.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
            '-d', 'openjdk-8-jdk-headless | java8-runtime-headless | java8-runtime',
            '-d', 'linux-image-generic (>= 3.13.0) | linux-image-virtual (>= 3.13.0) | linux-image-generic-lts-trusty (>= 3.13.0) | linux-image-virtual-lts-trusty (>= 3.13.0)',
            '--deb-recommends', 'java8-runtime-headless | java8-runtime',
            '--after-install', "${project.projectDir}/src/deb/control/postinst",
            '--before-install', "${project.projectDir}/src/deb/control/preinst",
            '--after-remove', "${project.projectDir}/src/deb/control/postrm",
            '--before-remove', "${project.projectDir}/src/deb/control/prerm" ])
}

rpm.doFirst {
    project.packaging.version = project.rpmVersion
    project.packaging.iteration = project.rpmRelease
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
            '--after-install', "${project.projectDir}/src/rhel7/control/postinst",
            '--before-install', "${project.projectDir}/src/rhel7/control/preinst",
            '--after-remove', "${project.projectDir}/src/rhel7/control/postrm",
            '--before-remove', "${project.projectDir}/src/rhel7/control/prerm",
    ])
    switch(project.rhelTarget) {
        case "el7":
            project.packaging.fpmOpts.addAll([
                    '--depends', 'java-openjdk-headless >= 1.8.0'
            ])
            break
        case "sles12":
            project.packaging.fpmOpts.addAll([
                    '--depends', 'java-1_8_0-openjdk-headless'
            ])
            break
        default:
            logger.warn("Invalid project-rhelTarget: " + project.rhelTarget +
                        ". Must be either 'el7' or 'sles12'")
    }
}

tar.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
}

debian.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

rpm.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

tar.doLast {
    new File("{buildDir}/install/${project.name}").deleteDir()
}

mainClassName = "org.midonet.agent.Agent"

task testReport(type: TestReport, dependsOn: test) {
    destinationDir = file("$buildDir/reports/tests")
    // Include the results from the `test` task in all subprojects
    if (!System.getProperties().containsKey('test.single')) {
        reportOn test
    }
}

test.finalizedBy(testReport)

preparePkg.dependsOn manpages
